// Mocks generated by Mockito 5.4.0 from annotations
// in bite_buddy/test/presentation/widgets/add_list_item_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:bite_buddy/core/util/input_converter.dart' as _i7;
import 'package:bite_buddy/features/shopping_list/domain/entities/shopping_list.dart'
    as _i9;
import 'package:bite_buddy/features/shopping_list/domain/usecases/add_list_item_to_shopping_list.dart'
    as _i4;
import 'package:bite_buddy/features/shopping_list/domain/usecases/delete_item_from_shopping_list.dart'
    as _i5;
import 'package:bite_buddy/features/shopping_list/domain/usecases/get_shopping_list.dart'
    as _i2;
import 'package:bite_buddy/features/shopping_list/domain/usecases/stream_shopping_list.dart'
    as _i6;
import 'package:bite_buddy/features/shopping_list/domain/usecases/update_shopping_list.dart'
    as _i3;
import 'package:bite_buddy/presentation/bloc/shopping_list_bloc.dart' as _i8;
import 'package:bloc/bloc.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetShoppingListUsecase_0 extends _i1.SmartFake
    implements _i2.GetShoppingListUsecase {
  _FakeGetShoppingListUsecase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateShoppingListUsecase_1 extends _i1.SmartFake
    implements _i3.UpdateShoppingListUsecase {
  _FakeUpdateShoppingListUsecase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddListItemToShoppingListUsecase_2 extends _i1.SmartFake
    implements _i4.AddListItemToShoppingListUsecase {
  _FakeAddListItemToShoppingListUsecase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteItemFromShoppingListUsecase_3 extends _i1.SmartFake
    implements _i5.DeleteItemFromShoppingListUsecase {
  _FakeDeleteItemFromShoppingListUsecase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamShoppingListUsecase_4 extends _i1.SmartFake
    implements _i6.StreamShoppingListUsecase {
  _FakeStreamShoppingListUsecase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInputConverter_5 extends _i1.SmartFake
    implements _i7.InputConverter {
  _FakeInputConverter_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeShoppingListState_6 extends _i1.SmartFake
    implements _i8.ShoppingListState {
  _FakeShoppingListState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeShoppingList_7 extends _i1.SmartFake implements _i9.ShoppingList {
  _FakeShoppingList_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ShoppingListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockShoppingListBloc extends _i1.Mock implements _i8.ShoppingListBloc {
  MockShoppingListBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetShoppingListUsecase get getShoppingList => (super.noSuchMethod(
        Invocation.getter(#getShoppingList),
        returnValue: _FakeGetShoppingListUsecase_0(
          this,
          Invocation.getter(#getShoppingList),
        ),
      ) as _i2.GetShoppingListUsecase);
  @override
  _i3.UpdateShoppingListUsecase get updateShoppingList => (super.noSuchMethod(
        Invocation.getter(#updateShoppingList),
        returnValue: _FakeUpdateShoppingListUsecase_1(
          this,
          Invocation.getter(#updateShoppingList),
        ),
      ) as _i3.UpdateShoppingListUsecase);
  @override
  _i4.AddListItemToShoppingListUsecase get addItemToShoppingList =>
      (super.noSuchMethod(
        Invocation.getter(#addItemToShoppingList),
        returnValue: _FakeAddListItemToShoppingListUsecase_2(
          this,
          Invocation.getter(#addItemToShoppingList),
        ),
      ) as _i4.AddListItemToShoppingListUsecase);
  @override
  _i5.DeleteItemFromShoppingListUsecase get deleteItemFromShoppingList =>
      (super.noSuchMethod(
        Invocation.getter(#deleteItemFromShoppingList),
        returnValue: _FakeDeleteItemFromShoppingListUsecase_3(
          this,
          Invocation.getter(#deleteItemFromShoppingList),
        ),
      ) as _i5.DeleteItemFromShoppingListUsecase);
  @override
  _i6.StreamShoppingListUsecase get streamShoppingList => (super.noSuchMethod(
        Invocation.getter(#streamShoppingList),
        returnValue: _FakeStreamShoppingListUsecase_4(
          this,
          Invocation.getter(#streamShoppingList),
        ),
      ) as _i6.StreamShoppingListUsecase);
  @override
  _i7.InputConverter get inputConverter => (super.noSuchMethod(
        Invocation.getter(#inputConverter),
        returnValue: _FakeInputConverter_5(
          this,
          Invocation.getter(#inputConverter),
        ),
      ) as _i7.InputConverter);
  @override
  _i8.ShoppingListState get initialState => (super.noSuchMethod(
        Invocation.getter(#initialState),
        returnValue: _FakeShoppingListState_6(
          this,
          Invocation.getter(#initialState),
        ),
      ) as _i8.ShoppingListState);
  @override
  _i9.ShoppingList get shoppingList => (super.noSuchMethod(
        Invocation.getter(#shoppingList),
        returnValue: _FakeShoppingList_7(
          this,
          Invocation.getter(#shoppingList),
        ),
      ) as _i9.ShoppingList);
  @override
  _i8.ShoppingListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeShoppingListState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.ShoppingListState);
  @override
  _i10.Stream<_i8.ShoppingListState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i10.Stream<_i8.ShoppingListState>.empty(),
      ) as _i10.Stream<_i8.ShoppingListState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i8.ShoppingListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i8.ShoppingListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i8.ShoppingListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i8.ShoppingListEvent>(
    _i11.EventHandler<E, _i8.ShoppingListState>? handler, {
    _i11.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i11.Transition<_i8.ShoppingListEvent, _i8.ShoppingListState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);
  @override
  void onChange(_i11.Change<_i8.ShoppingListState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
