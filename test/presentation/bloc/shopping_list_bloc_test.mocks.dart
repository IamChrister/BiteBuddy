// Mocks generated by Mockito 5.4.0 from annotations
// in bite_buddy/test/presentation/bloc/shopping_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bite_buddy/core/error/failures.dart' as _i7;
import 'package:bite_buddy/core/util/input_converter.dart' as _i4;
import 'package:bite_buddy/features/shopping_list/domain/entities/list_item.dart'
    as _i12;
import 'package:bite_buddy/features/shopping_list/domain/entities/shopping_list.dart'
    as _i8;
import 'package:bite_buddy/features/shopping_list/domain/repositories/shopping_list_repository.dart'
    as _i2;
import 'package:bite_buddy/features/shopping_list/domain/usecases/add_list_item_to_shopping_list.dart'
    as _i10;
import 'package:bite_buddy/features/shopping_list/domain/usecases/delete_item_from_shopping_list.dart'
    as _i11;
import 'package:bite_buddy/features/shopping_list/domain/usecases/get_shopping_list.dart'
    as _i5;
import 'package:bite_buddy/features/shopping_list/domain/usecases/update_shopping_list.dart'
    as _i9;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeShoppingListRepository_0 extends _i1.SmartFake
    implements _i2.ShoppingListRepository {
  _FakeShoppingListRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInputConverter_2 extends _i1.SmartFake
    implements _i4.InputConverter {
  _FakeInputConverter_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetShoppingListUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetShoppingListUsecase extends _i1.Mock
    implements _i5.GetShoppingListUsecase {
  MockGetShoppingListUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ShoppingListRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeShoppingListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ShoppingListRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.ShoppingList>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i8.ShoppingList>>.value(
                _FakeEither_1<_i7.Failure, _i8.ShoppingList>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.ShoppingList>>);
}

/// A class which mocks [UpdateShoppingListUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateShoppingListUsecase extends _i1.Mock
    implements _i9.UpdateShoppingListUsecase {
  MockUpdateShoppingListUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ShoppingListRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeShoppingListRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ShoppingListRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.ShoppingList>> call(
          _i8.ShoppingList? shoppingList) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [shoppingList],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i8.ShoppingList>>.value(
                _FakeEither_1<_i7.Failure, _i8.ShoppingList>(
          this,
          Invocation.method(
            #call,
            [shoppingList],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.ShoppingList>>);
}

/// A class which mocks [AddListItemToShoppingListUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddListItemToShoppingListUsecase extends _i1.Mock
    implements _i10.AddListItemToShoppingListUsecase {
  MockAddListItemToShoppingListUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.InputConverter get inputConverter => (super.noSuchMethod(
        Invocation.getter(#inputConverter),
        returnValue: _FakeInputConverter_2(
          this,
          Invocation.getter(#inputConverter),
        ),
      ) as _i4.InputConverter);
  @override
  _i3.Either<_i7.Failure, _i8.ShoppingList> call(
    _i8.ShoppingList? shoppingList,
    String? itemString,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            shoppingList,
            itemString,
          ],
        ),
        returnValue: _FakeEither_1<_i7.Failure, _i8.ShoppingList>(
          this,
          Invocation.method(
            #call,
            [
              shoppingList,
              itemString,
            ],
          ),
        ),
      ) as _i3.Either<_i7.Failure, _i8.ShoppingList>);
}

/// A class which mocks [DeleteItemFromShoppingListUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteItemFromShoppingListUsecase extends _i1.Mock
    implements _i11.DeleteItemFromShoppingListUsecase {
  MockDeleteItemFromShoppingListUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i7.Failure, _i8.ShoppingList> call(
    _i8.ShoppingList? shoppingList,
    _i12.ListItem? item,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            shoppingList,
            item,
          ],
        ),
        returnValue: _FakeEither_1<_i7.Failure, _i8.ShoppingList>(
          this,
          Invocation.method(
            #call,
            [
              shoppingList,
              item,
            ],
          ),
        ),
      ) as _i3.Either<_i7.Failure, _i8.ShoppingList>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i4.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i7.Failure, _i12.ListItem> stringToListItem(String? str) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToListItem,
          [str],
        ),
        returnValue: _FakeEither_1<_i7.Failure, _i12.ListItem>(
          this,
          Invocation.method(
            #stringToListItem,
            [str],
          ),
        ),
      ) as _i3.Either<_i7.Failure, _i12.ListItem>);
}
